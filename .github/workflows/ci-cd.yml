name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run tests with coverage
      run: |
        pytest src/tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Black (code formatting)
      run: black --diff src src/tests

    - name: Run Ruff (linting)
      run: ruff check src src/tests --fix

    - name: Run isort (import sorting)
      run: isort --diff src src/tests

    - name: Run MyPy (type checking)
      run: mypy src

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install bandit
      run: pip install bandit[toml]

    - name: Run bandit security scan
      run: |
        # Run bandit and capture the exit code, but don't fail the workflow immediately
        bandit -r src/ -f json -o bandit-report.json || true
        
        # Also generate a human-readable report for easier review
        bandit -r src/ -f txt -o bandit-report.txt || true
        
        # Show summary in the workflow log
        echo "Bandit security scan completed. Check artifacts for detailed report."
        if [ -f bandit-report.json ]; then
          echo "Report generated successfully."
        fi

    - name: Upload bandit reports
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: bandit-security-reports
        path: |
          bandit-report.json
          bandit-report.txt

    - name: Check for high-severity issues
      run: |
        # Optional: Parse the JSON report and fail only on high-severity issues
        if [ -f bandit-report.json ]; then
          # Count high-severity issues (you can adjust this logic as needed)
          high_severity=$(python -c "
import json
try:
    with open('bandit-report.json', 'r') as f:
        data = json.load(f)
    high_issues = [r for r in data.get('results', []) if r.get('issue_severity') == 'HIGH']
    print(len(high_issues))
except:
    print(0)
")
          
          echo "High-severity security issues found: $high_severity"
          
          # Uncomment the line below if you want to fail the workflow on high-severity issues
          # if [ "$high_severity" -gt 0 ]; then exit 1; fi
        fi

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v5
      with:
        name: dist
        path: dist/
        retention-days: 30

  publish-test:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: testpypi

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TESTPYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
